// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: drife/ride.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CQ struct {
	Driver         string `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	PremiumPercent int64  `protobuf:"varint,2,opt,name=premiumPercent,proto3" json:"premiumPercent,omitempty"`
}

func (m *CQ) Reset()         { *m = CQ{} }
func (m *CQ) String() string { return proto.CompactTextString(m) }
func (*CQ) ProtoMessage()    {}
func (*CQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_73d58ab172c36008, []int{0}
}
func (m *CQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CQ.Merge(m, src)
}
func (m *CQ) XXX_Size() int {
	return m.Size()
}
func (m *CQ) XXX_DiscardUnknown() {
	xxx_messageInfo_CQ.DiscardUnknown(m)
}

var xxx_messageInfo_CQ proto.InternalMessageInfo

func (m *CQ) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *CQ) GetPremiumPercent() int64 {
	if m != nil {
		return m.PremiumPercent
	}
	return 0
}

type Ride struct {
	Rider                string           `protobuf:"bytes,1,opt,name=rider,proto3" json:"rider,omitempty"`
	RideId               string           `protobuf:"bytes,2,opt,name=rideId,proto3" json:"rideId,omitempty"`
	Driver               string           `protobuf:"bytes,3,opt,name=driver,proto3" json:"driver,omitempty"`
	EligibleDrivers      []string         `protobuf:"bytes,4,rep,name=eligibleDrivers,proto3" json:"eligibleDrivers,omitempty"`
	InitialTime          int64            `protobuf:"varint,5,opt,name=initialTime,proto3" json:"initialTime,omitempty"`
	InitialDistance      int64            `protobuf:"varint,6,opt,name=initialDistance,proto3" json:"initialDistance,omitempty"`
	FinalTime            int64            `protobuf:"varint,7,opt,name=finalTime,proto3" json:"finalTime,omitempty"`
	FinalDistance        int64            `protobuf:"varint,8,opt,name=finalDistance,proto3" json:"finalDistance,omitempty"`
	BoostPercent         int64            `protobuf:"varint,9,opt,name=boostPercent,proto3" json:"boostPercent,omitempty"`
	Counterquotes        []*CQ            `protobuf:"bytes,10,rep,name=counterquotes,proto3" json:"counterquotes,omitempty"`
	BaseFare             int64            `protobuf:"varint,11,opt,name=baseFare,proto3" json:"baseFare,omitempty"`
	EstimatedFare        int64            `protobuf:"varint,12,opt,name=estimatedFare,proto3" json:"estimatedFare,omitempty"`
	FinalFare            int64            `protobuf:"varint,13,opt,name=finalFare,proto3" json:"finalFare,omitempty"`
	RideState            int64            `protobuf:"varint,14,opt,name=rideState,proto3" json:"rideState,omitempty"`
	ChosenPremiumPercent int64            `protobuf:"varint,15,opt,name=chosenPremiumPercent,proto3" json:"chosenPremiumPercent,omitempty"`
	Cq                   map[string]int64 `protobuf:"bytes,16,rep,name=cq,proto3" json:"cq,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Ride) Reset()         { *m = Ride{} }
func (m *Ride) String() string { return proto.CompactTextString(m) }
func (*Ride) ProtoMessage()    {}
func (*Ride) Descriptor() ([]byte, []int) {
	return fileDescriptor_73d58ab172c36008, []int{1}
}
func (m *Ride) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ride) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ride.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ride) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ride.Merge(m, src)
}
func (m *Ride) XXX_Size() int {
	return m.Size()
}
func (m *Ride) XXX_DiscardUnknown() {
	xxx_messageInfo_Ride.DiscardUnknown(m)
}

var xxx_messageInfo_Ride proto.InternalMessageInfo

func (m *Ride) GetRider() string {
	if m != nil {
		return m.Rider
	}
	return ""
}

func (m *Ride) GetRideId() string {
	if m != nil {
		return m.RideId
	}
	return ""
}

func (m *Ride) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Ride) GetEligibleDrivers() []string {
	if m != nil {
		return m.EligibleDrivers
	}
	return nil
}

func (m *Ride) GetInitialTime() int64 {
	if m != nil {
		return m.InitialTime
	}
	return 0
}

func (m *Ride) GetInitialDistance() int64 {
	if m != nil {
		return m.InitialDistance
	}
	return 0
}

func (m *Ride) GetFinalTime() int64 {
	if m != nil {
		return m.FinalTime
	}
	return 0
}

func (m *Ride) GetFinalDistance() int64 {
	if m != nil {
		return m.FinalDistance
	}
	return 0
}

func (m *Ride) GetBoostPercent() int64 {
	if m != nil {
		return m.BoostPercent
	}
	return 0
}

func (m *Ride) GetCounterquotes() []*CQ {
	if m != nil {
		return m.Counterquotes
	}
	return nil
}

func (m *Ride) GetBaseFare() int64 {
	if m != nil {
		return m.BaseFare
	}
	return 0
}

func (m *Ride) GetEstimatedFare() int64 {
	if m != nil {
		return m.EstimatedFare
	}
	return 0
}

func (m *Ride) GetFinalFare() int64 {
	if m != nil {
		return m.FinalFare
	}
	return 0
}

func (m *Ride) GetRideState() int64 {
	if m != nil {
		return m.RideState
	}
	return 0
}

func (m *Ride) GetChosenPremiumPercent() int64 {
	if m != nil {
		return m.ChosenPremiumPercent
	}
	return 0
}

func (m *Ride) GetCq() map[string]int64 {
	if m != nil {
		return m.Cq
	}
	return nil
}

type MsgCreateRide struct {
	Rider           string   `protobuf:"bytes,1,opt,name=rider,proto3" json:"rider,omitempty"`
	InitialTime     int64    `protobuf:"varint,2,opt,name=initialTime,proto3" json:"initialTime,omitempty"`
	InitialDistance int64    `protobuf:"varint,3,opt,name=initialDistance,proto3" json:"initialDistance,omitempty"`
	BoostPercent    int64    `protobuf:"varint,4,opt,name=boostPercent,proto3" json:"boostPercent,omitempty"`
	EligibleDrivers []string `protobuf:"bytes,5,rep,name=eligibleDrivers,proto3" json:"eligibleDrivers,omitempty"`
	RideState       int64    `protobuf:"varint,6,opt,name=rideState,proto3" json:"rideState,omitempty"`
}

func (m *MsgCreateRide) Reset()         { *m = MsgCreateRide{} }
func (m *MsgCreateRide) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRide) ProtoMessage()    {}
func (*MsgCreateRide) Descriptor() ([]byte, []int) {
	return fileDescriptor_73d58ab172c36008, []int{2}
}
func (m *MsgCreateRide) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRide) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRide.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRide) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRide.Merge(m, src)
}
func (m *MsgCreateRide) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRide) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRide.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRide proto.InternalMessageInfo

func (m *MsgCreateRide) GetRider() string {
	if m != nil {
		return m.Rider
	}
	return ""
}

func (m *MsgCreateRide) GetInitialTime() int64 {
	if m != nil {
		return m.InitialTime
	}
	return 0
}

func (m *MsgCreateRide) GetInitialDistance() int64 {
	if m != nil {
		return m.InitialDistance
	}
	return 0
}

func (m *MsgCreateRide) GetBoostPercent() int64 {
	if m != nil {
		return m.BoostPercent
	}
	return 0
}

func (m *MsgCreateRide) GetEligibleDrivers() []string {
	if m != nil {
		return m.EligibleDrivers
	}
	return nil
}

func (m *MsgCreateRide) GetRideState() int64 {
	if m != nil {
		return m.RideState
	}
	return 0
}

type MsgCounterQuote struct {
	Driver         string `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	RideId         int64  `protobuf:"varint,2,opt,name=rideId,proto3" json:"rideId,omitempty"`
	PremiumPercent int64  `protobuf:"varint,3,opt,name=premiumPercent,proto3" json:"premiumPercent,omitempty"`
}

func (m *MsgCounterQuote) Reset()         { *m = MsgCounterQuote{} }
func (m *MsgCounterQuote) String() string { return proto.CompactTextString(m) }
func (*MsgCounterQuote) ProtoMessage()    {}
func (*MsgCounterQuote) Descriptor() ([]byte, []int) {
	return fileDescriptor_73d58ab172c36008, []int{3}
}
func (m *MsgCounterQuote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCounterQuote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCounterQuote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCounterQuote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCounterQuote.Merge(m, src)
}
func (m *MsgCounterQuote) XXX_Size() int {
	return m.Size()
}
func (m *MsgCounterQuote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCounterQuote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCounterQuote proto.InternalMessageInfo

func (m *MsgCounterQuote) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *MsgCounterQuote) GetRideId() int64 {
	if m != nil {
		return m.RideId
	}
	return 0
}

func (m *MsgCounterQuote) GetPremiumPercent() int64 {
	if m != nil {
		return m.PremiumPercent
	}
	return 0
}

type MsgAcceptRide struct {
	Rider  string `protobuf:"bytes,1,opt,name=rider,proto3" json:"rider,omitempty"`
	RideId int64  `protobuf:"varint,2,opt,name=rideId,proto3" json:"rideId,omitempty"`
	Driver string `protobuf:"bytes,3,opt,name=driver,proto3" json:"driver,omitempty"`
}

func (m *MsgAcceptRide) Reset()         { *m = MsgAcceptRide{} }
func (m *MsgAcceptRide) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptRide) ProtoMessage()    {}
func (*MsgAcceptRide) Descriptor() ([]byte, []int) {
	return fileDescriptor_73d58ab172c36008, []int{4}
}
func (m *MsgAcceptRide) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptRide) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptRide.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptRide) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptRide.Merge(m, src)
}
func (m *MsgAcceptRide) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptRide) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptRide.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptRide proto.InternalMessageInfo

func (m *MsgAcceptRide) GetRider() string {
	if m != nil {
		return m.Rider
	}
	return ""
}

func (m *MsgAcceptRide) GetRideId() int64 {
	if m != nil {
		return m.RideId
	}
	return 0
}

func (m *MsgAcceptRide) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

type MsgEndRide struct {
	Rider         string `protobuf:"bytes,1,opt,name=rider,proto3" json:"rider,omitempty"`
	RideId        int64  `protobuf:"varint,2,opt,name=rideId,proto3" json:"rideId,omitempty"`
	FinalTime     int64  `protobuf:"varint,3,opt,name=finalTime,proto3" json:"finalTime,omitempty"`
	FinalDistance int64  `protobuf:"varint,4,opt,name=finalDistance,proto3" json:"finalDistance,omitempty"`
}

func (m *MsgEndRide) Reset()         { *m = MsgEndRide{} }
func (m *MsgEndRide) String() string { return proto.CompactTextString(m) }
func (*MsgEndRide) ProtoMessage()    {}
func (*MsgEndRide) Descriptor() ([]byte, []int) {
	return fileDescriptor_73d58ab172c36008, []int{5}
}
func (m *MsgEndRide) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEndRide) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEndRide.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEndRide) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEndRide.Merge(m, src)
}
func (m *MsgEndRide) XXX_Size() int {
	return m.Size()
}
func (m *MsgEndRide) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEndRide.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEndRide proto.InternalMessageInfo

func (m *MsgEndRide) GetRider() string {
	if m != nil {
		return m.Rider
	}
	return ""
}

func (m *MsgEndRide) GetRideId() int64 {
	if m != nil {
		return m.RideId
	}
	return 0
}

func (m *MsgEndRide) GetFinalTime() int64 {
	if m != nil {
		return m.FinalTime
	}
	return 0
}

func (m *MsgEndRide) GetFinalDistance() int64 {
	if m != nil {
		return m.FinalDistance
	}
	return 0
}

func init() {
	proto.RegisterType((*CQ)(nil), "example.drife.drife.cQ")
	proto.RegisterType((*Ride)(nil), "example.drife.drife.Ride")
	proto.RegisterMapType((map[string]int64)(nil), "example.drife.drife.Ride.CqEntry")
	proto.RegisterType((*MsgCreateRide)(nil), "example.drife.drife.MsgCreateRide")
	proto.RegisterType((*MsgCounterQuote)(nil), "example.drife.drife.MsgCounterQuote")
	proto.RegisterType((*MsgAcceptRide)(nil), "example.drife.drife.MsgAcceptRide")
	proto.RegisterType((*MsgEndRide)(nil), "example.drife.drife.MsgEndRide")
}

func init() { proto.RegisterFile("drife/ride.proto", fileDescriptor_73d58ab172c36008) }

var fileDescriptor_73d58ab172c36008 = []byte{
	// 574 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0x8d, 0xed, 0x24, 0x6d, 0x26, 0x4d, 0x13, 0xed, 0x17, 0x7d, 0x58, 0x11, 0xb2, 0x82, 0x85,
	0xaa, 0x9c, 0x1c, 0x51, 0x84, 0x84, 0x90, 0x90, 0x80, 0xa6, 0x48, 0x1c, 0x2a, 0x35, 0x06, 0x2e,
	0xdc, 0x9c, 0xf5, 0xd4, 0x5d, 0x11, 0xdb, 0xc9, 0x7a, 0x53, 0x35, 0x17, 0x6e, 0xdc, 0xf9, 0x59,
	0x1c, 0x7b, 0xe4, 0x82, 0x84, 0x92, 0x3f, 0x82, 0x76, 0xed, 0x84, 0xd8, 0x18, 0x5a, 0x71, 0x49,
	0xf6, 0xbd, 0x79, 0x1e, 0xef, 0xec, 0xbe, 0x67, 0xe8, 0xf8, 0x9c, 0x5d, 0xe0, 0x90, 0x33, 0x1f,
	0x9d, 0x19, 0x8f, 0x45, 0x4c, 0xfe, 0xc3, 0x6b, 0x2f, 0x9c, 0x4d, 0xd1, 0x51, 0x95, 0xf4, 0xb7,
	0xd7, 0x0d, 0xe2, 0x20, 0x56, 0xf5, 0xa1, 0x5c, 0xa5, 0x52, 0x7b, 0x04, 0x3a, 0x1d, 0x93, 0xff,
	0xa1, 0xee, 0x73, 0x76, 0x85, 0xdc, 0xd4, 0xfa, 0xda, 0xa0, 0xe1, 0x66, 0x88, 0x1c, 0xc1, 0xe1,
	0x8c, 0x63, 0xc8, 0x16, 0xe1, 0x39, 0x72, 0x8a, 0x91, 0x30, 0xf5, 0xbe, 0x36, 0x30, 0xdc, 0x02,
	0x6b, 0x7f, 0xae, 0x41, 0xd5, 0x65, 0x3e, 0x92, 0x2e, 0xd4, 0xe4, 0x3e, 0x36, 0x7d, 0x52, 0x20,
	0xdb, 0xcb, 0xc5, 0x1b, 0x5f, 0x3d, 0xde, 0x70, 0x33, 0xb4, 0xf3, 0x5a, 0x23, 0xf7, 0xda, 0x01,
	0xb4, 0x71, 0xca, 0x02, 0x36, 0x99, 0xe2, 0x48, 0x31, 0x89, 0x59, 0xed, 0x1b, 0x83, 0x86, 0x5b,
	0xa4, 0x49, 0x1f, 0x9a, 0x2c, 0x62, 0x82, 0x79, 0xd3, 0x77, 0x2c, 0x44, 0xb3, 0xa6, 0x76, 0xb7,
	0x4b, 0xc9, 0x5e, 0x19, 0x1c, 0xb1, 0x44, 0x78, 0x11, 0x45, 0xb3, 0xae, 0x54, 0x45, 0x9a, 0xdc,
	0x87, 0xc6, 0x05, 0x8b, 0xb2, 0x4e, 0x7b, 0x4a, 0xf3, 0x8b, 0x20, 0x0f, 0xa1, 0xa5, 0xc0, 0xb6,
	0xcb, 0xbe, 0x52, 0xe4, 0x49, 0x62, 0xc3, 0xc1, 0x24, 0x8e, 0x13, 0xb1, 0x39, 0xae, 0x86, 0x12,
	0xe5, 0x38, 0xf2, 0x1c, 0x5a, 0x34, 0x5e, 0x44, 0x02, 0xf9, 0x7c, 0x11, 0x0b, 0x4c, 0x4c, 0xe8,
	0x1b, 0x83, 0xe6, 0xf1, 0x3d, 0xa7, 0xe4, 0xd6, 0x1c, 0x3a, 0x76, 0xf3, 0x6a, 0xd2, 0x83, 0xfd,
	0x89, 0x97, 0xe0, 0x6b, 0x8f, 0xa3, 0xd9, 0x54, 0xed, 0xb7, 0x58, 0x6e, 0x12, 0x13, 0xc1, 0x42,
	0x4f, 0xa0, 0xaf, 0x04, 0x07, 0xe9, 0x26, 0x73, 0xe4, 0x76, 0x50, 0xa5, 0x68, 0xed, 0x0c, 0xba,
	0xa9, 0xca, 0xeb, 0x79, 0x2b, 0x3c, 0x81, 0xe6, 0x61, 0x5a, 0xdd, 0x12, 0xe4, 0x18, 0xba, 0xf4,
	0x32, 0x4e, 0x30, 0x3a, 0xcf, 0xfb, 0xa2, 0xad, 0x84, 0xa5, 0x35, 0xf2, 0x08, 0x74, 0x3a, 0x37,
	0x3b, 0x6a, 0xca, 0x07, 0xa5, 0x53, 0x4a, 0xef, 0x38, 0x27, 0xf3, 0xd3, 0x48, 0xf0, 0xa5, 0xab,
	0xd3, 0x79, 0xef, 0x09, 0xec, 0x65, 0x90, 0x74, 0xc0, 0xf8, 0x88, 0xcb, 0xcc, 0x50, 0x72, 0x29,
	0x4d, 0x76, 0xe5, 0x4d, 0x17, 0x98, 0x99, 0x31, 0x05, 0xcf, 0xf4, 0xa7, 0x9a, 0xfd, 0x5d, 0x83,
	0xd6, 0x59, 0x12, 0x9c, 0x70, 0xf4, 0x04, 0xfe, 0xc5, 0x90, 0x05, 0xdb, 0xe8, 0x77, 0xb2, 0x8d,
	0x51, 0x6e, 0x9b, 0xe2, 0x95, 0x57, 0x4b, 0xae, 0xbc, 0xc4, 0xd0, 0xb5, 0x72, 0x43, 0xe7, 0x4e,
	0xbf, 0x5e, 0x38, 0x7d, 0x9b, 0x41, 0x5b, 0x8e, 0x97, 0xfa, 0x61, 0x2c, 0xfd, 0xf0, 0xc7, 0xe8,
	0xe6, 0x33, 0x67, 0x6c, 0x33, 0xf7, 0x7b, 0xa4, 0x8d, 0xd2, 0x48, 0xbf, 0x57, 0x27, 0xf9, 0x92,
	0x52, 0x9c, 0x89, 0x3b, 0x47, 0xdb, 0xb8, 0x2d, 0xda, 0xf6, 0x27, 0x80, 0xb3, 0x24, 0x38, 0x8d,
	0xfc, 0x7f, 0xe8, 0x99, 0x0b, 0xa8, 0x71, 0x6b, 0x40, 0xab, 0x25, 0x01, 0x7d, 0xf5, 0xe2, 0xeb,
	0xca, 0xd2, 0x6e, 0x56, 0x96, 0xf6, 0x63, 0x65, 0x69, 0x5f, 0xd6, 0x56, 0xe5, 0x66, 0x6d, 0x55,
	0xbe, 0xad, 0xad, 0xca, 0x87, 0xa3, 0x80, 0x89, 0xcb, 0xc5, 0xc4, 0xa1, 0x71, 0x38, 0xcc, 0x3c,
	0x3a, 0x4c, 0xbf, 0xac, 0xd7, 0xd9, 0xbf, 0x58, 0xce, 0x30, 0x99, 0xd4, 0xd5, 0x87, 0xf3, 0xf1,
	0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0x24, 0x51, 0x41, 0x77, 0x05, 0x00, 0x00,
}

func (m *CQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PremiumPercent != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.PremiumPercent))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Driver) > 0 {
		i -= len(m.Driver)
		copy(dAtA[i:], m.Driver)
		i = encodeVarintRide(dAtA, i, uint64(len(m.Driver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ride) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ride) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ride) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cq) > 0 {
		for k := range m.Cq {
			v := m.Cq[k]
			baseI := i
			i = encodeVarintRide(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRide(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRide(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.ChosenPremiumPercent != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.ChosenPremiumPercent))
		i--
		dAtA[i] = 0x78
	}
	if m.RideState != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.RideState))
		i--
		dAtA[i] = 0x70
	}
	if m.FinalFare != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.FinalFare))
		i--
		dAtA[i] = 0x68
	}
	if m.EstimatedFare != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.EstimatedFare))
		i--
		dAtA[i] = 0x60
	}
	if m.BaseFare != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.BaseFare))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Counterquotes) > 0 {
		for iNdEx := len(m.Counterquotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Counterquotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRide(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.BoostPercent != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.BoostPercent))
		i--
		dAtA[i] = 0x48
	}
	if m.FinalDistance != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.FinalDistance))
		i--
		dAtA[i] = 0x40
	}
	if m.FinalTime != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.FinalTime))
		i--
		dAtA[i] = 0x38
	}
	if m.InitialDistance != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.InitialDistance))
		i--
		dAtA[i] = 0x30
	}
	if m.InitialTime != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.InitialTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EligibleDrivers) > 0 {
		for iNdEx := len(m.EligibleDrivers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EligibleDrivers[iNdEx])
			copy(dAtA[i:], m.EligibleDrivers[iNdEx])
			i = encodeVarintRide(dAtA, i, uint64(len(m.EligibleDrivers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Driver) > 0 {
		i -= len(m.Driver)
		copy(dAtA[i:], m.Driver)
		i = encodeVarintRide(dAtA, i, uint64(len(m.Driver)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RideId) > 0 {
		i -= len(m.RideId)
		copy(dAtA[i:], m.RideId)
		i = encodeVarintRide(dAtA, i, uint64(len(m.RideId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rider) > 0 {
		i -= len(m.Rider)
		copy(dAtA[i:], m.Rider)
		i = encodeVarintRide(dAtA, i, uint64(len(m.Rider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateRide) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRide) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRide) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RideState != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.RideState))
		i--
		dAtA[i] = 0x30
	}
	if len(m.EligibleDrivers) > 0 {
		for iNdEx := len(m.EligibleDrivers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EligibleDrivers[iNdEx])
			copy(dAtA[i:], m.EligibleDrivers[iNdEx])
			i = encodeVarintRide(dAtA, i, uint64(len(m.EligibleDrivers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BoostPercent != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.BoostPercent))
		i--
		dAtA[i] = 0x20
	}
	if m.InitialDistance != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.InitialDistance))
		i--
		dAtA[i] = 0x18
	}
	if m.InitialTime != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.InitialTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rider) > 0 {
		i -= len(m.Rider)
		copy(dAtA[i:], m.Rider)
		i = encodeVarintRide(dAtA, i, uint64(len(m.Rider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCounterQuote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCounterQuote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCounterQuote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PremiumPercent != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.PremiumPercent))
		i--
		dAtA[i] = 0x18
	}
	if m.RideId != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.RideId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Driver) > 0 {
		i -= len(m.Driver)
		copy(dAtA[i:], m.Driver)
		i = encodeVarintRide(dAtA, i, uint64(len(m.Driver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptRide) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptRide) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptRide) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Driver) > 0 {
		i -= len(m.Driver)
		copy(dAtA[i:], m.Driver)
		i = encodeVarintRide(dAtA, i, uint64(len(m.Driver)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RideId != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.RideId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rider) > 0 {
		i -= len(m.Rider)
		copy(dAtA[i:], m.Rider)
		i = encodeVarintRide(dAtA, i, uint64(len(m.Rider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEndRide) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEndRide) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEndRide) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinalDistance != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.FinalDistance))
		i--
		dAtA[i] = 0x20
	}
	if m.FinalTime != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.FinalTime))
		i--
		dAtA[i] = 0x18
	}
	if m.RideId != 0 {
		i = encodeVarintRide(dAtA, i, uint64(m.RideId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rider) > 0 {
		i -= len(m.Rider)
		copy(dAtA[i:], m.Rider)
		i = encodeVarintRide(dAtA, i, uint64(len(m.Rider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRide(dAtA []byte, offset int, v uint64) int {
	offset -= sovRide(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Driver)
	if l > 0 {
		n += 1 + l + sovRide(uint64(l))
	}
	if m.PremiumPercent != 0 {
		n += 1 + sovRide(uint64(m.PremiumPercent))
	}
	return n
}

func (m *Ride) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Rider)
	if l > 0 {
		n += 1 + l + sovRide(uint64(l))
	}
	l = len(m.RideId)
	if l > 0 {
		n += 1 + l + sovRide(uint64(l))
	}
	l = len(m.Driver)
	if l > 0 {
		n += 1 + l + sovRide(uint64(l))
	}
	if len(m.EligibleDrivers) > 0 {
		for _, s := range m.EligibleDrivers {
			l = len(s)
			n += 1 + l + sovRide(uint64(l))
		}
	}
	if m.InitialTime != 0 {
		n += 1 + sovRide(uint64(m.InitialTime))
	}
	if m.InitialDistance != 0 {
		n += 1 + sovRide(uint64(m.InitialDistance))
	}
	if m.FinalTime != 0 {
		n += 1 + sovRide(uint64(m.FinalTime))
	}
	if m.FinalDistance != 0 {
		n += 1 + sovRide(uint64(m.FinalDistance))
	}
	if m.BoostPercent != 0 {
		n += 1 + sovRide(uint64(m.BoostPercent))
	}
	if len(m.Counterquotes) > 0 {
		for _, e := range m.Counterquotes {
			l = e.Size()
			n += 1 + l + sovRide(uint64(l))
		}
	}
	if m.BaseFare != 0 {
		n += 1 + sovRide(uint64(m.BaseFare))
	}
	if m.EstimatedFare != 0 {
		n += 1 + sovRide(uint64(m.EstimatedFare))
	}
	if m.FinalFare != 0 {
		n += 1 + sovRide(uint64(m.FinalFare))
	}
	if m.RideState != 0 {
		n += 1 + sovRide(uint64(m.RideState))
	}
	if m.ChosenPremiumPercent != 0 {
		n += 1 + sovRide(uint64(m.ChosenPremiumPercent))
	}
	if len(m.Cq) > 0 {
		for k, v := range m.Cq {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRide(uint64(len(k))) + 1 + sovRide(uint64(v))
			n += mapEntrySize + 2 + sovRide(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MsgCreateRide) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Rider)
	if l > 0 {
		n += 1 + l + sovRide(uint64(l))
	}
	if m.InitialTime != 0 {
		n += 1 + sovRide(uint64(m.InitialTime))
	}
	if m.InitialDistance != 0 {
		n += 1 + sovRide(uint64(m.InitialDistance))
	}
	if m.BoostPercent != 0 {
		n += 1 + sovRide(uint64(m.BoostPercent))
	}
	if len(m.EligibleDrivers) > 0 {
		for _, s := range m.EligibleDrivers {
			l = len(s)
			n += 1 + l + sovRide(uint64(l))
		}
	}
	if m.RideState != 0 {
		n += 1 + sovRide(uint64(m.RideState))
	}
	return n
}

func (m *MsgCounterQuote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Driver)
	if l > 0 {
		n += 1 + l + sovRide(uint64(l))
	}
	if m.RideId != 0 {
		n += 1 + sovRide(uint64(m.RideId))
	}
	if m.PremiumPercent != 0 {
		n += 1 + sovRide(uint64(m.PremiumPercent))
	}
	return n
}

func (m *MsgAcceptRide) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Rider)
	if l > 0 {
		n += 1 + l + sovRide(uint64(l))
	}
	if m.RideId != 0 {
		n += 1 + sovRide(uint64(m.RideId))
	}
	l = len(m.Driver)
	if l > 0 {
		n += 1 + l + sovRide(uint64(l))
	}
	return n
}

func (m *MsgEndRide) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Rider)
	if l > 0 {
		n += 1 + l + sovRide(uint64(l))
	}
	if m.RideId != 0 {
		n += 1 + sovRide(uint64(m.RideId))
	}
	if m.FinalTime != 0 {
		n += 1 + sovRide(uint64(m.FinalTime))
	}
	if m.FinalDistance != 0 {
		n += 1 + sovRide(uint64(m.FinalDistance))
	}
	return n
}

func sovRide(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRide(x uint64) (n int) {
	return sovRide(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRide
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRide
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRide
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Driver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumPercent", wireType)
			}
			m.PremiumPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PremiumPercent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRide(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRide
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ride) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRide
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ride: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ride: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRide
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRide
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RideId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRide
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRide
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RideId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRide
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRide
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Driver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibleDrivers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRide
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRide
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EligibleDrivers = append(m.EligibleDrivers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialTime", wireType)
			}
			m.InitialTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialDistance", wireType)
			}
			m.InitialDistance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialDistance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalTime", wireType)
			}
			m.FinalTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalDistance", wireType)
			}
			m.FinalDistance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalDistance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoostPercent", wireType)
			}
			m.BoostPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoostPercent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterquotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRide
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRide
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counterquotes = append(m.Counterquotes, &CQ{})
			if err := m.Counterquotes[len(m.Counterquotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFare", wireType)
			}
			m.BaseFare = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseFare |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedFare", wireType)
			}
			m.EstimatedFare = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimatedFare |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalFare", wireType)
			}
			m.FinalFare = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalFare |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RideState", wireType)
			}
			m.RideState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RideState |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChosenPremiumPercent", wireType)
			}
			m.ChosenPremiumPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChosenPremiumPercent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRide
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRide
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cq == nil {
				m.Cq = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRide
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRide
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRide
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRide
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRide
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRide(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRide
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Cq[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRide(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRide
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRide) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRide
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRide: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRide: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRide
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRide
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialTime", wireType)
			}
			m.InitialTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialDistance", wireType)
			}
			m.InitialDistance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialDistance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoostPercent", wireType)
			}
			m.BoostPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoostPercent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibleDrivers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRide
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRide
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EligibleDrivers = append(m.EligibleDrivers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RideState", wireType)
			}
			m.RideState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RideState |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRide(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRide
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCounterQuote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRide
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCounterQuote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCounterQuote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRide
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRide
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Driver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RideId", wireType)
			}
			m.RideId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RideId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumPercent", wireType)
			}
			m.PremiumPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PremiumPercent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRide(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRide
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptRide) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRide
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptRide: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptRide: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRide
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRide
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RideId", wireType)
			}
			m.RideId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RideId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRide
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRide
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Driver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRide(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRide
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEndRide) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRide
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEndRide: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEndRide: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRide
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRide
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RideId", wireType)
			}
			m.RideId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RideId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalTime", wireType)
			}
			m.FinalTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalDistance", wireType)
			}
			m.FinalDistance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRide
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalDistance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRide(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRide
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRide(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRide
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRide
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRide
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRide
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRide
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRide
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRide        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRide          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRide = fmt.Errorf("proto: unexpected end of group")
)
