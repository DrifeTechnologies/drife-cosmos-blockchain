// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: drife/counterquote.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Counterquote struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id             uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PremiumPercent int64  `protobuf:"varint,3,opt,name=premiumPercent,proto3" json:"premiumPercent,omitempty"`
	RideId         int64  `protobuf:"varint,4,opt,name=rideId,proto3" json:"rideId,omitempty"`
}

func (m *Counterquote) Reset()         { *m = Counterquote{} }
func (m *Counterquote) String() string { return proto.CompactTextString(m) }
func (*Counterquote) ProtoMessage()    {}
func (*Counterquote) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc69ebef1c0b9324, []int{0}
}
func (m *Counterquote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Counterquote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Counterquote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Counterquote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Counterquote.Merge(m, src)
}
func (m *Counterquote) XXX_Size() int {
	return m.Size()
}
func (m *Counterquote) XXX_DiscardUnknown() {
	xxx_messageInfo_Counterquote.DiscardUnknown(m)
}

var xxx_messageInfo_Counterquote proto.InternalMessageInfo

func (m *Counterquote) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Counterquote) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Counterquote) GetPremiumPercent() int64 {
	if m != nil {
		return m.PremiumPercent
	}
	return 0
}

func (m *Counterquote) GetRideId() int64 {
	if m != nil {
		return m.RideId
	}
	return 0
}

func init() {
	proto.RegisterType((*Counterquote)(nil), "example.drife.drife.Counterquote")
}

func init() { proto.RegisterFile("drife/counterquote.proto", fileDescriptor_dc69ebef1c0b9324) }

var fileDescriptor_dc69ebef1c0b9324 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0x29, 0xca, 0x4c,
	0x4b, 0xd5, 0x4f, 0xce, 0x2f, 0xcd, 0x2b, 0x49, 0x2d, 0x2a, 0x2c, 0xcd, 0x2f, 0x49, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4e, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0xd5, 0x03, 0xab,
	0x80, 0x90, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0x79, 0x7d, 0x10, 0x0b, 0xa2, 0x54, 0xa9,
	0x82, 0x8b, 0xc7, 0x19, 0xc9, 0x00, 0x21, 0x09, 0x2e, 0xf6, 0xe4, 0xa2, 0xd4, 0xc4, 0x92, 0xfc,
	0x22, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0x57, 0x88, 0x8f, 0x8b, 0x29, 0x33, 0x45,
	0x82, 0x49, 0x81, 0x51, 0x83, 0x25, 0x88, 0x29, 0x33, 0x45, 0x48, 0x8d, 0x8b, 0xaf, 0xa0, 0x28,
	0x35, 0x37, 0xb3, 0x34, 0x37, 0x20, 0xb5, 0x28, 0x39, 0x35, 0xaf, 0x44, 0x82, 0x59, 0x81, 0x51,
	0x83, 0x39, 0x08, 0x4d, 0x54, 0x48, 0x8c, 0x8b, 0xad, 0x28, 0x33, 0x25, 0xd5, 0x33, 0x45, 0x82,
	0x05, 0x2c, 0x0f, 0xe5, 0x39, 0x39, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83,
	0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43,
	0x94, 0x5a, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0xd4, 0x27, 0xfa,
	0x10, 0xbf, 0x56, 0x40, 0xe9, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0x17, 0x8c, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x42, 0x35, 0xd1, 0x09, 0x01, 0x00, 0x00,
}

func (m *Counterquote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Counterquote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Counterquote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RideId != 0 {
		i = encodeVarintCounterquote(dAtA, i, uint64(m.RideId))
		i--
		dAtA[i] = 0x20
	}
	if m.PremiumPercent != 0 {
		i = encodeVarintCounterquote(dAtA, i, uint64(m.PremiumPercent))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintCounterquote(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCounterquote(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCounterquote(dAtA []byte, offset int, v uint64) int {
	offset -= sovCounterquote(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Counterquote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCounterquote(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovCounterquote(uint64(m.Id))
	}
	if m.PremiumPercent != 0 {
		n += 1 + sovCounterquote(uint64(m.PremiumPercent))
	}
	if m.RideId != 0 {
		n += 1 + sovCounterquote(uint64(m.RideId))
	}
	return n
}

func sovCounterquote(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCounterquote(x uint64) (n int) {
	return sovCounterquote(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Counterquote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCounterquote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Counterquote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Counterquote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounterquote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCounterquote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCounterquote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounterquote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumPercent", wireType)
			}
			m.PremiumPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounterquote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PremiumPercent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RideId", wireType)
			}
			m.RideId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounterquote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RideId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCounterquote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCounterquote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCounterquote(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCounterquote
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCounterquote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCounterquote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCounterquote
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCounterquote
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCounterquote
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCounterquote        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCounterquote          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCounterquote = fmt.Errorf("proto: unexpected end of group")
)
